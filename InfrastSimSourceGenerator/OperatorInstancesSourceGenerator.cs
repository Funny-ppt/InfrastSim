using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace InfrastSimSourceGenerator;

[Generator]
public class OperatorInstancesSourceGenerator : ISourceGenerator {
    public void Initialize(GeneratorInitializationContext context) {
        //Debugger.Launch();
    }

    public void Execute(GeneratorExecutionContext context) {
        // 找到所有目标名空间下的类
        var targetNamespace = "InfrastSim.TimeDriven.Operators";
        var semanticModels = context.Compilation.SyntaxTrees
            .Select(tree => context.Compilation.GetSemanticModel(tree));

        var sourceBuilder = new StringBuilder();
        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine("using System.Linq;");
        sourceBuilder.AppendLine("using System.Collections.Frozen;");
        sourceBuilder.AppendLine("using InfrastSim.TimeDriven.Operators;");
        sourceBuilder.AppendLine("namespace InfrastSim.TimeDriven;");
        sourceBuilder.AppendLine("internal static class OperatorInstances");
        sourceBuilder.AppendLine("{");
        sourceBuilder.AppendLine("    public static readonly FrozenDictionary<string, OperatorBase> Operators;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("    static OperatorInstances()");
        sourceBuilder.AppendLine("    {");
        sourceBuilder.AppendLine($"        Dictionary<string, OperatorBase> ops = new();");


        foreach (var model in semanticModels) {
            foreach (var classDeclaration in model.SyntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>()) {
                var classSymbol = model.GetDeclaredSymbol(classDeclaration);
                if (classSymbol != null && classSymbol.ContainingNamespace.ToDisplayString() == targetNamespace) {
                    var className = classDeclaration.Identifier.Text;
                    var propName = "Name"; // Assuming each class has a 'Name' property
                    sourceBuilder.AppendLine($"        var {className} = new {className}();");
                    sourceBuilder.AppendLine($"        ops.Add({className}.{propName}, {className});");
                }
            }
        }

        sourceBuilder.AppendLine($"        Operators = ops.ToFrozenDictionary();");
        sourceBuilder.AppendLine("    }");
        sourceBuilder.AppendLine("}");

        var sourceCode = sourceBuilder.ToString();
        context.AddSource("OperatorInstances.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }
}
